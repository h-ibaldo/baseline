# Baseline Project - Cursor AI Guidelines

## Project Identity

Baseline is a **highly vibe-coded, AI-friendly project** that embraces AI contributions while maintaining human authorship and accountability.

**Status**: Early development - NOT accepting external contributions yet.

**Vision**: Replace WordPress, Figma (for web), and Webflow with an open-source, designer-first tool.

## Technology Stack

- **Framework**: SvelteKit
- **Language**: TypeScript (strict mode)
- **Styling**: CSS with CSS Variables
- **Build Tool**: Vite
- **Package Manager**: npm
- **Testing**: Vitest

## Code Style Guidelines

### Code Philosophy
- **Minimal Code**: Write concise, clear code
- **Well Documented**: JSDoc for public APIs, comments for complex logic
- **Testable**: Write tests for utilities and business logic
- **Incremental**: Break large tasks into reviewable chunks

### Naming Conventions
- **Files**: kebab-case (`user-service.ts`)
- **Components**: PascalCase (`UserProfile.svelte`)
- **Functions/Variables**: camelCase (`getUserData`)
- **Constants**: UPPER_SNAKE_CASE (`API_BASE_URL`)
- **Types/Interfaces**: PascalCase (`UserData`)

### TypeScript
- Use TypeScript for ALL new code
- Avoid `any` - use `unknown` or proper types
- Define types for all functions and variables

### Quality Standards
- ✅ TypeScript types everywhere
- ✅ Error handling (try-catch, validation)
- ✅ Unit tests for utilities
- ✅ Semantic HTML with ARIA labels
- ✅ Performance optimizations (lazy loading, efficient reactivity)
- ❌ Don't commit untested code
- ❌ Don't skip error handling
- ❌ Don't use `any` type

## Git Workflow

### Branch Strategy (MANDATORY)
- **Each roadmap task gets its own branch**
- Branch naming: `feat/task-name` or `fix/task-name`
- Examples: `feat/cms-database-layer`, `feat/media-library`, `fix/baseline-snap`
- **AI MUST create branch before starting any roadmap task**
- **AI MUST NOT work directly on main**

### AI Workflow for Roadmap Tasks
1. Say: "Let me create a branch for this roadmap task"
2. Create branch: `git checkout -b feat/task-name`
3. Implement with proper commits
4. Test thoroughly (all tests passing)
5. **Update documentation** before merging:
   - Update `docs/planning/roadmap.md` (mark tasks complete)
   - Update `README.md` (add new features)
   - Update `docs/planning/architecture.md` (if architecture changed)
6. Merge to main when complete
7. Push to main
8. Delete branch after merge

### Commit Message Format
```
type(scope): description

[optional body with AI assistance details]
```

**Types**: `feat`, `fix`, `docs`, `style`, `refactor`, `test`, `chore`

### Documentation Updates (IMPORTANT)
- **Update docs BEFORE pushing to main**
- Mark completed items in `roadmap.md`
- Add new features to `README.md`
- Document architecture changes in `architecture.md`
- Format: `feat(scope): complete [item name]` with details in body

## Project-Specific Guidelines

### Design Philosophy
- **Baseline alignment**: InDesign-style typography grid
- **Designer-first**: Prioritize designer experience
- **Code output**: Design generates production code
- **Component-based**: Everything is reusable

### File Organization
```
src/
├── routes/           # SvelteKit routes (pages)
├── lib/
│   ├── components/   # Reusable UI components
│   │   ├── canvas/   # Canvas-related
│   │   ├── design/   # Design components
│   │   └── ui/       # UI components
│   ├── stores/       # Svelte stores
│   ├── utils/        # Utility functions
│   ├── types/        # TypeScript types
│   └── index.ts      # Public API exports
```

## Current Phase

**Phase 1 - COMPLETED ✅**: Designer Tool
- DOM canvas, baseline grid, event sourcing, persistence, components, code generation, export

**Phase 1.5 - IN PROGRESS**: CMS Foundation
- Next: Database layer → Publishing → Auth → Media → Admin panel

See `docs/planning/roadmap.md` for detailed tasks.

## AI Contribution Guidelines

1. **AI Generation**: Generate initial code/documentation
2. **Human Review**: Human reviews and tests
3. **Human Refinement**: Optimize, add types, improve
4. **Human Commit**: Human commits with AI credit
5. **Documentation**: Update docs before pushing

### AI Best For
- Code structure generation
- Boilerplate and repetitive code
- Documentation writing
- Test generation

### Human Oversight Required For
- Architecture decisions
- Security implementations
- Performance-critical code
- API design

---

**Remember**: This is a highly vibe-coded project. Embrace AI assistance, but maintain human accountability and quality standards. Always update documentation before pushing to main.
