// Baseline CMS Database Schema
// SQLite for simplicity, can be switched to PostgreSQL for scale

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Pages - The heart of the CMS
model Page {
  id        String   @id @default(uuid())
  slug      String   @unique
  title     String
  description String?

  // Design data (event sourcing)
  designEvents String  // JSON string of design events array
  designState  String? // JSON string of current state (derived from events)

  // Published output (generated via AST)
  publishedHtml String?
  publishedCss  String?
  publishedJs   String?

  // Status and metadata
  status    String   @default("draft") // draft, published, archived
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])

  // Blog template system
  isBlogTemplate Boolean @default(false) // Mark as blog template
  blogTemplateType String? // post, list, category, author

  // SEO
  metaTitle       String?
  metaDescription String?
  metaImage       String?

  // Draft autosave fields
  draftContent   String?   // JSON string of unsaved draft design
  lastSavedAt    DateTime? // Last autosave timestamp
  hasUnsavedChanges Boolean @default(false)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?

  // Relations
  revisions PageRevision[]
  blogPosts BlogPost[] // If this is a blog template
  componentInstances ComponentInstance[] // Components used in this page

  @@index([slug])
  @@index([status])
  @@index([authorId])
}

// Page Revisions - Version history
model PageRevision {
  id           String   @id @default(uuid())
  pageId       String
  page         Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)

  // Revision content
  version      Int      // Version number (1, 2, 3...)
  title        String?  // Optional revision title/description
  designEvents String   // JSON string of events at this revision
  metadata     String?  // JSON snapshot of page metadata (title, slug, SEO)

  // Tracking
  createdBy    String
  creator      User     @relation(fields: [createdBy], references: [id])
  createdAt    DateTime @default(now())

  @@index([pageId])
  @@index([createdBy])
  @@index([version])
}

// Components - Reusable modular components
model Component {
  id          String   @id @default(uuid())
  name        String
  description String?
  category    String   @default("custom") // text, image, button, card, hero, etc.

  // Component content (JSON component data)
  content     String   // JSON string of component structure
  properties  String?  // JSON string of editable properties
  thumbnail   String?  // Preview image URL

  // Style inheritance
  styleLibraryId String? // Inherit from style library
  styleLibrary   StyleLibrary? @relation(fields: [styleLibraryId], references: [id])

  // Usage tracking
  usageCount  Int      @default(0)

  // Metadata
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  isPublic    Boolean  @default(false) // shared across users or private
  version     Int      @default(1)

  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  instances   ComponentInstance[] // Where this component is used

  @@index([category])
  @@index([createdBy])
  @@index([isPublic])
  @@index([styleLibraryId])
}

// Component Instances - Track where components are used
model ComponentInstance {
  id          String   @id @default(uuid())
  componentId String
  component   Component @relation(fields: [componentId], references: [id])
  
  // Where it's used
  pageId      String?
  page        Page?    @relation(fields: [pageId], references: [id])
  
  // Instance-specific overrides
  overrides   String?  // JSON string of property overrides
  
  // Position in design
  position    String?  // JSON string of position data
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([componentId])
  @@index([pageId])
}

// Style Libraries - Figma-style design system
model StyleLibrary {
  id          String   @id @default(uuid())
  name        String
  description String?
  
  // Library content
  colors      String?  // JSON string of color palette
  typography  String?  // JSON string of typography system
  spacing     String?  // JSON string of spacing system
  components  String?  // JSON string of component styles
  
  // Metadata
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  isPublic    Boolean  @default(false)
  version     Int      @default(1)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  inheritedComponents  Component[] // Components that inherit from this library
  
  @@index([createdBy])
  @@index([isPublic])
}

// Themes - Export/import system
model Theme {
  id          String   @id @default(uuid())
  name        String
  description String?
  version     String   @default("1.0.0")
  
  // Theme content
  themeData   String   // JSON string of theme structure
  components  String?  // JSON string of Svelte components
  styles      String?  // JSON string of CSS styles
  assets      String?  // JSON string of asset references
  
  // Metadata
  createdBy   String
  creator     User     @relation(fields: [createdBy], references: [id])
  isPublic    Boolean  @default(false)
  downloadCount Int    @default(0)
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([createdBy])
  @@index([isPublic])
}

// Blog Posts - Content for blog templates
model BlogPost {
  id          String   @id @default(uuid())
  title       String
  slug        String   @unique
  content     String   // Rich text content (HTML/JSON)
  excerpt     String?
  
  // Blog template reference
  templateId  String
  template    Page     @relation(fields: [templateId], references: [id])
  
  // Status
  status      String   @default("draft") // draft, published, archived
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  
  // SEO
  metaTitle       String?
  metaDescription String?
  metaImage       String?
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  
  // Relations
  categories  BlogCategory[]
  tags        BlogTag[]
  
  @@index([slug])
  @@index([status])
  @@index([authorId])
  @@index([templateId])
}

// Blog Categories
model BlogCategory {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  posts       BlogPost[]
  
  @@index([slug])
}

// Blog Tags
model BlogTag {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  posts       BlogPost[]
  
  @@index([slug])
}

// Media Library
model Media {
  id         String   @id @default(uuid())
  filename   String
  path       String
  url        String
  mimeType   String
  size       Int
  width      Int?
  height     Int?
  altText    String?
  caption    String?
  uploadedBy String
  uploader   User     @relation(fields: [uploadedBy], references: [id])
  createdAt  DateTime @default(now())

  @@index([uploadedBy])
  @@index([mimeType])
}

// Users and Authentication
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String
  role         String   @default("author") // admin, editor, author, subscriber
  avatarUrl    String?
  status       String   @default("active") // active, suspended
  createdAt    DateTime @default(now())
  lastLoginAt  DateTime?

  // Relations
  pages         Page[]
  pageRevisions PageRevision[]
  components    Component[]
  styleLibraries StyleLibrary[]
  themes        Theme[]
  blogPosts     BlogPost[]
  media         Media[]
  sessions      Session[]
  posts         Post[]

  @@index([email])
  @@index([role])
}

// Sessions - For JWT refresh tokens
model Session {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

// Site Settings - Global configuration
model Setting {
  key         String   @id
  value       String
  type        String   @default("string") // string, number, boolean, json
  description String?
  updatedAt   DateTime @updatedAt
}

// Plugins - Installed plugins registry
model Plugin {
  id          String   @id // Plugin ID (e.g., '@linebasis/blog')
  name        String
  version     String
  isActive    Boolean  @default(false)
  settings    String?  // JSON string of plugin settings
  installedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([isActive])
}



// ========================================
// Plugin: @linebasis/blog
// ========================================

// Blog Plugin Schema
// This extends the core LineBasis schema with blog-specific models
// Blog Posts
model Post {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  excerpt     String?
  content     String   // Markdown or HTML content
  featuredImage String?
  // Status and metadata
  status      String   @default("draft") // draft, published, scheduled, archived
  authorId    String
  author      User     @relation(fields: [authorId], references: [id])
  // SEO
  metaTitle       String?
  metaDescription String?
  metaImage       String?
  // Timestamps
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  scheduledFor DateTime?
  // Relations
  categories  PostCategory[]
  tags        PostTag[]
  @@index([slug])
  @@index([status])
  @@index([authorId])
  @@index([publishedAt])
}
// Categories
model Category {
  id          String   @id @default(uuid())
  slug        String   @unique
  name        String
  description String?
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children    Category[] @relation("CategoryHierarchy")
  // SEO
  metaTitle       String?
  metaDescription String?
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Relations
  posts       PostCategory[]
  @@index([slug])
  @@index([parentId])
}
// Tags
model Tag {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  // Relations
  posts     PostTag[]
  @@index([slug])
}
// Post-Category junction (many-to-many)
model PostCategory {
  postId     String
  categoryId String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  @@id([postId, categoryId])
  @@index([postId])
  @@index([categoryId])
}
// Post-Tag junction (many-to-many)
model PostTag {
  postId  String
  tagId   String
  post    Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag     Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  @@id([postId, tagId])
  @@index([postId])
  @@index([tagId])
}